/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZalozSerwer.java
 *
 * Created on 2010-05-17, 23:29:36
 */
package kik;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author Maciej Rzepiński & Łukasz Czerepuk
 */
public class Serwer extends javax.swing.JFrame {

    private int PORT;
    public static BufferedReader in;
    public static PrintWriter out;
    String nickPrzeciwnika;

    /** Creates new form ZalozSerwer */
    public Serwer() throws UnknownHostException {
        initComponents();
        String ip = InetAddress.getLocalHost().getHostAddress();
        int width = Toolkit.getDefaultToolkit().getScreenSize().width;
        int height = Toolkit.getDefaultToolkit().getScreenSize().height;
        this.setBounds(width / 2 - 140, height / 2 - 105, 280, 210);
        IP.setText(ip);
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SerwerPORT = new javax.swing.JLabel();
        IPOpis = new javax.swing.JLabel();
        IP = new javax.swing.JLabel();
        PORTSerwer = new javax.swing.JTextField();
        SerwerNick = new javax.swing.JLabel();
        nickSerwer = new javax.swing.JTextField();
        Zaloz = new javax.swing.JButton();
        Wroc = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        nickOpis = new javax.swing.JLabel();
        uwaga = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Załóż Serwer");
        setResizable(false);

        SerwerPORT.setFont(new java.awt.Font("Verdana", 0, 13));
        SerwerPORT.setText("PORT:");

        IPOpis.setFont(new java.awt.Font("Verdana", 0, 11));
        IPOpis.setText("Twoje IP:");

        IP.setFont(new java.awt.Font("Verdana", 1, 13));

        PORTSerwer.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        PORTSerwer.setText("8080");
        PORTSerwer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aZaloz(evt);
            }
        });

        SerwerNick.setFont(new java.awt.Font("Verdana", 0, 13));
        SerwerNick.setText("Nick:");

        nickSerwer.setFont(new java.awt.Font("Verdana", 0, 13));
        nickSerwer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aZaloz(evt);
            }
        });

        Zaloz.setText("Załóż");
        Zaloz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aZaloz(evt);
            }
        });

        Wroc.setText("Wróć");
        Wroc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aWroc(evt);
            }
        });

        nickOpis.setFont(new java.awt.Font("Verdana", 0, 10));
        nickOpis.setForeground(new java.awt.Color(153, 0, 0));
        nickOpis.setText("(Minimalnie 3 znaki, maksymalnie 8 znaków)");

        uwaga.setFont(new java.awt.Font("Verdana", 1, 11));
        uwaga.setForeground(new java.awt.Color(153, 0, 0));
        uwaga.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SerwerNick)
                                .addGap(18, 18, 18)
                                .addComponent(nickSerwer, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SerwerPORT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PORTSerwer, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(IPOpis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IP, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                        .addGap(69, 69, 69))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nickOpis)
                        .addContainerGap(17, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Wroc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Zaloz)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(uwaga)
                        .addContainerGap(271, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SerwerNick)
                    .addComponent(nickSerwer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(nickOpis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SerwerPORT)
                    .addComponent(PORTSerwer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IPOpis)
                    .addComponent(IP, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uwaga)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Wroc)
                    .addComponent(Zaloz))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aZaloz(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aZaloz
        if (
                (PORTSerwer.getText().length() > 0)
                && (nickSerwer.getText().length() >= 3
                && nickSerwer.getText().length() <= 8)
            ) {
            uwaga.setText("");
            PORT = Integer.parseInt(PORTSerwer.getText());
            Zaloz.setEnabled(false);
            try {
                polacz();
                this.setVisible(false);
            } catch (IOException ex) {
                Logger.getLogger(Serwer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            uwaga.setText("Wypełnij poprawnie wszystkie pola!");
        }
    }//GEN-LAST:event_aZaloz

    private void aWroc(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aWroc
        this.setVisible(false);
        new Start();
    }//GEN-LAST:event_aWroc

    public void polacz() throws IOException {
        ServerSocket s = new ServerSocket(PORT);

        Socket socket = s.accept();

        Serwer.in =
                new BufferedReader(
                new InputStreamReader(
                socket.getInputStream()));
        Serwer.out =
                new PrintWriter(
                new BufferedWriter(
                new OutputStreamWriter(
                socket.getOutputStream())), true);

        if (socket.isConnected()) {
            String nS = new String();
            nS = nickSerwer.getText();
            Serwer.out.println("n|" + nS);
            new SerwerPlansza(nS);
        }

        ActionListener taskPerformer = new ActionListener() {

            public void actionPerformed(ActionEvent evt) {
                try {
                    if (Serwer.in.ready() == true) {
                        String inKlient = new String();
                        inKlient = Serwer.in.readLine();
                        if (inKlient.substring(0, 1).equals("n")) {
                            nickPrzeciwnika = inKlient.substring(2);
                            SerwerPlansza.pobierzNick(nickPrzeciwnika);
                        } else if (inKlient.substring(0, 1).equals("t")) {
                            SerwerPlansza.poleCzatu.append("<" + nickPrzeciwnika + "> " + inKlient.substring(2) + "\n");
                        } else if (inKlient.substring(0, 1).equals("p")) {
                            if (inKlient.substring(2, 4).equals("p1")) {
                                Metody.p(0, 0, "SerwerPlansza", false);
                            } else if (inKlient.substring(2, 4).equals("p2")) {
                                Metody.p(0, 1, "SerwerPlansza", false);
                            } else if (inKlient.substring(2, 4).equals("p3")) {
                                Metody.p(0, 2, "SerwerPlansza", false);
                            } else if (inKlient.substring(2, 4).equals("p4")) {
                                Metody.p(1, 0, "SerwerPlansza", false);
                            } else if (inKlient.substring(2, 4).equals("p5")) {
                                Metody.p(1, 1, "SerwerPlansza", false);
                            } else if (inKlient.substring(2, 4).equals("p6")) {
                                Metody.p(1, 2, "SerwerPlansza", false);
                            } else if (inKlient.substring(2, 4).equals("p7")) {
                                Metody.p(2, 0, "SerwerPlansza", false);
                            } else if (inKlient.substring(2, 4).equals("p8")) {
                                Metody.p(2, 1, "SerwerPlansza", false);
                            } else if (inKlient.substring(2, 4).equals("p9")) {
                                Metody.p(2, 2, "SerwerPlansza", false);
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };
        new Timer(10, taskPerformer).start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IP;
    private javax.swing.JLabel IPOpis;
    private javax.swing.JTextField PORTSerwer;
    private javax.swing.JLabel SerwerNick;
    private javax.swing.JLabel SerwerPORT;
    private javax.swing.JButton Wroc;
    private javax.swing.JButton Zaloz;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel nickOpis;
    private javax.swing.JTextField nickSerwer;
    private javax.swing.JLabel uwaga;
    // End of variables declaration//GEN-END:variables
}
