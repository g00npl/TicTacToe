/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Polacz.java
 *
 * Created on 2010-05-18, 11:59:16
 */
package kik;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author Maciej Rzepiński & Łukasz Czerepuk
 */
public class Klient extends javax.swing.JFrame {

    public static PrintWriter out;
    public static BufferedReader in;
    String nickPrzeciwnika;

    /** Creates new form Polacz */
    public Klient() {
        initComponents();
        int width = Toolkit.getDefaultToolkit().getScreenSize().width;
        int height = Toolkit.getDefaultToolkit().getScreenSize().height;
        this.setBounds(width / 2 - 145, height / 2 - 90, 290, 180);
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        KlientNick = new javax.swing.JLabel();
        KlientIP = new javax.swing.JLabel();
        KlientPORT = new javax.swing.JLabel();
        nickKlient = new javax.swing.JTextField();
        IPKlient = new javax.swing.JTextField();
        PORTKlient = new javax.swing.JTextField();
        polaczKlient = new javax.swing.JButton();
        wrocKlient = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        nickOpis = new javax.swing.JLabel();
        uwaga = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Połącz");
        setResizable(false);

        KlientNick.setFont(new java.awt.Font("Verdana", 0, 11));
        KlientNick.setText("Nick:");

        KlientIP.setFont(new java.awt.Font("Verdana", 0, 11));
        KlientIP.setText("IP:");

        KlientPORT.setFont(new java.awt.Font("Verdana", 0, 11));
        KlientPORT.setText("PORT:");

        nickKlient.setFont(new java.awt.Font("Verdana", 0, 13));
        nickKlient.setToolTipText("Tutaj wpisz swój nick");
        nickKlient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aPolacz(evt);
            }
        });

        IPKlient.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        IPKlient.setText("localhost");
        IPKlient.setToolTipText("Wpisz tutaj IP z którym chcesz nawiązać połączenie");
        IPKlient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aPolacz(evt);
            }
        });

        PORTKlient.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        PORTKlient.setText("8080");
        PORTKlient.setToolTipText("Wpisz tutaj PORT z którym chcesz nawiązać połączenie");
        PORTKlient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aPolacz(evt);
            }
        });

        polaczKlient.setFont(new java.awt.Font("Verdana", 0, 13));
        polaczKlient.setText("Połącz");
        polaczKlient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aPolacz(evt);
            }
        });

        wrocKlient.setFont(new java.awt.Font("Verdana", 0, 13));
        wrocKlient.setText("Wróć");
        wrocKlient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aWroc(evt);
            }
        });

        nickOpis.setFont(new java.awt.Font("Verdana", 0, 10));
        nickOpis.setForeground(new java.awt.Color(153, 0, 0));
        nickOpis.setText("(Minimalnie 3 znaki, maksymalnie 8 znaków)");

        uwaga.setFont(new java.awt.Font("Verdana", 1, 11));
        uwaga.setForeground(new java.awt.Color(153, 0, 0));
        uwaga.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KlientNick)
                            .addComponent(KlientIP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(IPKlient, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(KlientPORT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                                .addComponent(PORTKlient, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nickKlient, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)))
                    .addComponent(uwaga)
                    .addComponent(nickOpis)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(wrocKlient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(polaczKlient)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KlientNick)
                    .addComponent(nickKlient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(nickOpis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KlientIP)
                    .addComponent(IPKlient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PORTKlient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(KlientPORT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uwaga)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(polaczKlient)
                    .addComponent(wrocKlient))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aWroc(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aWroc
        this.setVisible(false);
        new Start();
    }//GEN-LAST:event_aWroc

    private void aPolacz(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aPolacz
        if (    
                (PORTKlient.getText().length() > 0)
                && (IPKlient.getText().length() > 0)
                && (nickKlient.getText().length() >= 3
                && nickKlient.getText().length() <= 8)
            ) {
            uwaga.setText("");

            int port = Integer.parseInt(PORTKlient.getText());
            String ip = IPKlient.getText();
            try {
                polacz(port, ip);
                this.setVisible(false);
            } catch (IOException ex) {
                Logger.getLogger(Klient.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            uwaga.setText("Wypełnij poprawnie wszystkie pola!");
        }
    }//GEN-LAST:event_aPolacz

    public void polacz(int port, String ip) throws IOException {

        InetAddress address = InetAddress.getByName(ip);
        Socket socket = new Socket(address, port);

        Klient.in =
                new BufferedReader(
                new InputStreamReader(
                socket.getInputStream()));

        Klient.out =
                new PrintWriter(
                new BufferedWriter(
                new OutputStreamWriter(
                socket.getOutputStream())), true);

        if (socket.isConnected()) {
            String nK = new String();
            nK = nickKlient.getText();
            Klient.out.println("n|" + nK);
            new KlientPlansza(nK);
        }

        ActionListener taskPerformer = new ActionListener() {

            public void actionPerformed(ActionEvent evt) {
                try {
                    if (Klient.in.ready() == true) {
                        String inSerwer = new String();
                        inSerwer = Klient.in.readLine();
                        if (inSerwer.substring(0, 1).equals("n")) {
                            nickPrzeciwnika = inSerwer.substring(2);
                            KlientPlansza.pobierzNick(nickPrzeciwnika);
                        } else if (inSerwer.substring(0, 1).equals("m")) {
                            KlientPlansza.ktoZaczyna("P");
                        } else if (inSerwer.substring(0, 1).equals("o")) {
                            KlientPlansza.ktoZaczyna("T");
                        } else if (inSerwer.substring(0, 1).equals("g")) {
                            KlientPlansza.startGry();
                        } else if (inSerwer.substring(0, 1).equals("t")) {
                            KlientPlansza.poleCzatu.append("<" + nickPrzeciwnika + "> " + inSerwer.substring(2) + "\n");
                        } else if (inSerwer.substring(0, 1).equals("p")) {
                            if (inSerwer.substring(2, 4).equals("p1")) {
                                Metody.p(0, 0, "KlientPlansza", false);
                            } else if (inSerwer.substring(2, 4).equals("p2")) {
                                Metody.p(0, 1, "KlientPlansza", false);
                            } else if (inSerwer.substring(2, 4).equals("p3")) {
                                Metody.p(0, 2, "KlientPlansza", false);
                            } else if (inSerwer.substring(2, 4).equals("p4")) {
                                Metody.p(1, 0, "KlientPlansza", false);
                            } else if (inSerwer.substring(2, 4).equals("p5")) {
                                Metody.p(1, 1, "KlientPlansza", false);
                            } else if (inSerwer.substring(2, 4).equals("p6")) {
                                Metody.p(1, 2, "KlientPlansza", false);
                            } else if (inSerwer.substring(2, 4).equals("p7")) {
                                Metody.p(2, 0, "KlientPlansza", false);
                            } else if (inSerwer.substring(2, 4).equals("p8")) {
                                Metody.p(2, 1, "KlientPlansza", false);
                            } else if (inSerwer.substring(2, 4).equals("p9")) {
                                Metody.p(2, 2, "KlientPlansza", false);
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };

        new Timer(10, taskPerformer).start();

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IPKlient;
    private javax.swing.JLabel KlientIP;
    private javax.swing.JLabel KlientNick;
    private javax.swing.JLabel KlientPORT;
    private javax.swing.JTextField PORTKlient;
    private javax.swing.JSeparator jSeparator1;
    private static javax.swing.JTextField nickKlient;
    private javax.swing.JLabel nickOpis;
    private javax.swing.JButton polaczKlient;
    private javax.swing.JLabel uwaga;
    private javax.swing.JButton wrocKlient;
    // End of variables declaration//GEN-END:variables
}
